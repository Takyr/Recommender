from pathlib import Path
import streamlit as st  
from streamlit_option_menu import option_menu
from PIL import Image  
from collections import defaultdict
import random
import numpy as np
import pandas as pd
import pickle
import sqlite3                              
from passlib.hash import pbkdf2_sha256      

# --- PATH SETTINGS ---
THIS_DIR = Path(__file__).parent if "__file__" in locals() else Path.cwd()
ASSETS_DIR = THIS_DIR / "assets"
STYLES_DIR = THIS_DIR / "styles"
CSS_FILE = STYLES_DIR / "main.css"


# --- GENERAL SETTINGS ---
STRIPE_CHECKOUT = "https://buy.stripe.com/test_fZe2963rr1u22J2001"
CONTACT_EMAIL = "tungnguyen.260302@gmail.com"
DEMO_VIDEO = "https://www.youtube.com/watch?v=RDeIM_yOzZU"
PRODUCT_NAME = "FASHION STORE"
formatted_product_name = f'<span style="font-size: 55px; font-weight: bold; color: #FF5733;">{PRODUCT_NAME}</span>'
st.markdown(formatted_product_name, unsafe_allow_html=True)
st.sidebar.title("FASHION STORE")
PRODUCT_DESCRIPTION = """
Fashion Store - Th∆∞∆°ng hi·ªáu th·ªùi trang thi·∫øt k·∫ø d√†nh cho ph√°i ƒë·∫πp. C·ª≠a h√†ng mang ƒë·∫øn tinh th·∫ßn thi·∫øt k·∫ø:

Ph√≥ng kho√°ng, t·ª± do, l√£ng m·∫°ng v√† sang tr·ªçng.

Kh√°t khao mang ƒë·∫øn v·∫ª ƒë·∫πp c√° t√≠nh nh∆∞ng v·∫´n ƒë·ªß d·ªãu d√†ng, nh·ªØng thi·∫øt k·∫ø c·ªßa shop t·∫≠p trung h∆∞·ªõng ƒë·∫øn nh√≥m kh√°ch h√†ng t·ª´ 25 tu·ªïi - 34 tu·ªïi, c√≥ c√° t√≠nh ri√™ng v√† kh√°t khao s·ª± n·ªïi b·∫≠t. Ch·ªçn cho m√¨nh Slogan: Breath Of Beauty‚Äù V·ªõi mong mu·ªën s·∫Ω l√† ngu·ªìn c·∫£m h·ª©ng v·ªÅ c√°i ƒë·∫πp b·∫•t t·∫≠n cho nh·ªØng c√¥ g√°i khi ƒë·∫øn v·ªõi c·ª≠a h√†ng.

Thank you & Love You!

"""

# Create cart variable to store shopping cart
cart = {}

test_data = pickle.load(open('test_data.pkl', 'rb'))
test_data_ = pd.DataFrame(test_data)

# Load train data for seeing recommendations
train_data = pickle.load(open('img_data.pkl', 'rb'))
train_data_ = pd.DataFrame(train_data)

# Load model
knn = pickle.load(open('model_recommend.pkl', 'rb'))

# TF-IDF for text part
X_test = pickle.load(open('test_array.pkl', 'rb'))


# --- MAIN SECTION ---
selected = option_menu(None, ["Home", "S·∫Øp Ra M·∫Øt", "Gi·ªè H√†ng", "Thanh To√°n", "G·ª£i √ù S·∫£n Ph·∫©m", "ƒê√°nh Gi√°"], 
    menu_icon="cast", default_index=0, orientation="horizontal")


def load_css_file(css_file_path):
    with open(css_file_path) as f:
        return st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

load_css_file(CSS_FILE)


if selected == "Home":
    left_col, right_col = st.columns((2, 1))
    with left_col:
        st.text("")
        st.write(PRODUCT_DESCRIPTION)
        st.markdown(
            f'<a href={STRIPE_CHECKOUT} class="button">üëâ Mua Ngay</a>',
            unsafe_allow_html=True,
        )
    with right_col:
        product_image = Image.open(ASSETS_DIR / "crop.jpg")
        st.image(product_image, width=500)

elif selected == "S·∫Øp Ra M·∫Øt":
    # --- COLLECTION ---
    st.sidebar.markdown(
        f'<a href="#sap-ra-mat" style="text-decoration: none; color: inherit;"><h4>üí° S·∫Øp Ra M·∫Øt</h4></a>', 
        unsafe_allow_html=True
    )    
    st.subheader("üí° S·∫Øp Ra M·∫Øt")
    collection = {
        "glasses.jpg": [
            "Noir Glasses",
            50.0,  
            "Noir ƒë∆∞·ª£c y√™u th√≠ch b·ªüi gi√° th√†nh h·ª£p l√Ω, nh·∫•t l√† c√°c b·∫°n sinh vi√™n. C√≥ th·ªÉ thay tr√≤ng k√≠nh c·∫≠n, kh·ªõp n·ªëi ·ªëc ch·∫Øc ch·∫Øn, ƒë·ªám m√∫t √™m √°i ngay s·ªëng m≈©i, thi·∫øt k·∫ø t·ªëi gi·∫£n ph√π h·ª£p v·ªõi ƒëa s·ªë d√°ng m·∫∑t. S·∫£n ph·∫©m ƒëi k√®m v·ªõi h·ªôp k√≠nh v√† khƒÉn lau ri√™ng.",
        ],
        "downtown_small.jpg": [
            "Downtown Shopper - Small",
            75.0,  
            "T√∫i trong l√†m b·∫±ng ch·∫•t li·ªáu gi·∫£ da, style minimal v·ªõi zip kho√° k√©o. T√∫i ngo√†i c√≥ ho·∫° ti·∫øt l∆∞·ªõi v√† quai c·∫ßm. Quai ng·ªçc trai v√† d√¢y x√≠ch trang tr√≠ c√≥ th·ªÉ t√°ch r·ªùi, t·∫°o n√™n nhi·ªÅu s·ª± l·ª±a chon ƒë·ªÉ ƒëi v·ªõi nhi·ªÅu outfit kh√°c nhau.",
        ],
        "daphne_shoes.jpg": [
            "Daphne Heels",
            120.0,  
            "Daphne Heels ƒë∆∞·ª£c thi·∫øt k·∫ø tr√™n form sandal cao g√≥t m≈©i tr√≤n, 8,5cm. Quai m≈©i tr∆∞·ªõc thanh m·∫£nh v·ªõi chi ti·∫øt d√¢y ƒë√° l·∫•p l√°nh, ch·∫•t li·ªáu Satin ƒëen sang tr·ªçng.",
        ],
    }

    # Hi·ªÉn th·ªã s·∫£n ph·∫©m trong b·ªô s∆∞u t·∫≠p

    for image, description in collection.items():
        product_name, price, product_description = description
        image = Image.open(ASSETS_DIR / image)

        st.write("")
        left_col, right_col = st.columns(2)
        left_col.image(image, use_column_width=True)
        right_col.write(f"**{product_name}**")
        right_col.write(f"Price: ${price}")
        right_col.write(product_description)
    # --- DEMO ---
    st.sidebar.markdown(
        f'<a href="#ve-chung-toi" style="text-decoration: none; color: inherit;"><h4>üé• V·ªÅ Ch√∫ng T√¥i</h4></a>', 
        unsafe_allow_html=True
    )
    st.write("<a name='ve-chung-toi'></a>", unsafe_allow_html=True)
    st.write("---")
    st.subheader("üé• V·ªÅ Ch√∫ng T√¥i")
    st.video(DEMO_VIDEO, format="video/mp4", start_time=0)

# # --- ADD TO CART ---
# if selected == "Th√™m V√†o Gi·ªè H√†ng":

#     st.sidebar.markdown(
#         f'<a href="#them-vao-gio-hang" style="text-decoration: none; color: inherit;"><h4>üõí Th√™m V√†o Gi·ªè H√†ng</h4></a>', 
#         unsafe_allow_html=True
#     )
#     st.write("<a name='them-vao-gio-hang'></a>", unsafe_allow_html=True)
#     st.write("---")
#     st.subheader("üõí Th√™m V√†o Gi·ªè H√†ng")
#     selected_products = st.multiselect("Ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ th√™m v√†o gi·ªè h√†ng:", list(test_data_['title']))

#     if selected_products:
#         for selected_product in selected_products:
#             quantity = st.number_input(f"Nh·∫≠p s·ªë l∆∞·ª£ng {selected_product}:", min_value=1, value=1)

#             if st.button(f"Th√™m {quantity} {selected_product} v√†o gi·ªè h√†ng"):
#                 if selected_product in test_data_['title'].values:
#                     cart[selected_product] = cart.get(selected_product, 0) + quantity
#                     st.success(f"ƒê√£ th√™m {quantity} {selected_product} v√†o gi·ªè h√†ng.")
#                 else:
#                     st.warning(f"{selected_product} s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.")


# --- VIEW CART ---
if selected == "Gi·ªè H√†ng":
    st.write("<a name='gio-hang'></a>", unsafe_allow_html=True)
    st.subheader("üõí Gi·ªè H√†ng")
    st.sidebar.markdown(
        f'<a href="#gio-hang" style="text-decoration: none; color: inherit;"><h4>üõí Gi·ªè H√†ng</h4></a>', 
        unsafe_allow_html=True
    )
    if not cart:
            st.write("Gi·ªè h√†ng tr·ªëng.")
    else:
            total_price = 0
            for product, quantity in cart.items():
                product_info = test_data_[test_data_['title'] == product].iloc[0]
                price = product_info['formatted_price']
                total_price += price * quantity
                st.write(f"{product} x {quantity} - ${price * quantity}")

            st.write(f"**T·ªïng gi√°:** ${total_price}")

#--- RECOMMENDATION ---
if selected == "G·ª£i √ù S·∫£n Ph·∫©m":
    st.sidebar.markdown(
        f'<a href="#goi-y-san-pham" style="text-decoration: none; color: inherit;"><h4>üîé G·ª£i √ù S·∫£n Ph·∫©m</h4></a>', 
        unsafe_allow_html=True
    )
    st.write("<a name='goi-y-san-pham'></a>", unsafe_allow_html=True)

    # load t·∫≠p d·ªØ li·ªáu test ƒë·ªÉ t√¨m h√¨nh ·∫£nh hi·ªán t·∫°i cho s·∫£n ph·∫©m
    test_data = pickle.load(open('test_data.pkl','rb'))

    # load t·∫≠p d·ªØ li·ªáu train ƒë·ªÉ t√¨m c√°c s·∫£n ph·∫©m ƒë∆∞·ª£c recommend
    train_data = pickle.load(open('img_data.pkl','rb'))
    train_data_ = pd.DataFrame(train_data)

    # load model
    knn = pickle.load(open('model_recommend.pkl','rb'))

    # tfidf cho ph·∫ßn text
    X_test = pickle.load(open('test_array.pkl','rb'))

    st.title("DANH S√ÅCH S·∫¢N PH·∫®M")
    # Connect to the Google Sheet
    df = pd.DataFrame(test_data)

    import streamlit.components.v1 as components
    from pandas.api.types import (
        is_categorical_dtype,
        is_datetime64_any_dtype,
        is_numeric_dtype,
        is_object_dtype,
    )

    def filter_dataframe(df: pd.DataFrame) -> pd.DataFrame:

        st.data_editor(
        df,
        column_order=('titleref', 'product_type_name','medium_image_url','coloref','brandref','formatted_price'),
        column_config={
            
        
            "medium_image_url": st.column_config.ImageColumn(
                "Preview Image", help="Streamlit app preview screenshots"
            )
        },
        hide_index=True,
    )

        modify = st.checkbox("B·ªô l·ªçc")
        if not modify:
            return df[['titleref', 'product_type_name','coloref','brandref','formatted_price']]
    
        df = df.copy()
        
        # Try to convert datetimes into a standard format (datetime, no timezone)
        for col in df.columns:
            if is_object_dtype(df[col]):
                try:
                    df[col] = pd.to_datetime(df[col])
                except Exception:
                    pass
            if is_datetime64_any_dtype(df[col]):
                df[col] = df[col].dt.tz_localize(None)

        modification_container = st.container()

        with modification_container:
            to_filter_columns = st.multiselect("Nh·∫≠p t√™n th∆∞∆°ng hi·ªáu, m√†u s·∫Øc, gi√° c·∫£,... c·∫ßn t√¨m", df.columns)
            for column in to_filter_columns:
                left, right = st.columns((1, 20))
                # Treat columns with < 10 unique values as categorical
                if is_categorical_dtype(df[column]) or df[column].nunique() < 50:
                    user_cat_input = right.multiselect(
                        f"Values for {column}",
                        df[column].unique(),
                        default=list(df[column].unique()),
                    )
                    df = df[df[column].isin(user_cat_input)]
                elif is_numeric_dtype(df[column]):
                    _min = float(df[column].min())
                    _max = float(df[column].max())
                    step = (_max - _min) / 100
                    user_num_input = right.slider(
                        f"Values for {column}",
                        min_value=_min,
                        max_value=_max,
                        value=(_min, _max),
                        step=step,
                    )
                    df = df[df[column].between(*user_num_input)]
                elif is_datetime64_any_dtype(df[column]):
                    user_date_input = right.date_input(
                        f"Values for {column}",
                        value=(
                            df[column].min(),
                            df[column].max(),
                        ),
                    )
                    if len(user_date_input) == 2:
                        user_date_input = tuple(map(pd.to_datetime, user_date_input))
                        start_date, end_date = user_date_input
                        df = df.loc[df[column].between(start_date, end_date)]
                else:
                    user_text_input = right.text_input(
                        f"{column}",
                    )
                    if user_text_input:
                        df = df[df[column].astype(str).str.contains(user_text_input)]
        return df[['titleref', 'product_type_name','coloref','brandref','formatted_price']]
        

    test_data_ = pd.DataFrame(test_data)
    test_data_2 = pd.DataFrame(test_data)
    filterdf = pd.DataFrame(filter_dataframe(df))

    # Use a text_input to get the keywords to filter the dataframe
    text_search = st.text_input("B·∫°n t√¨m g√¨...", value="")

    # Filter the dataframe using masks
    m1 = df["product_type_name"].str.contains(text_search)
    m2 = df["coloref"].str.contains(text_search)
    m3 = df["brand"].str.contains(text_search)
    m4 = df["titleref"].str.contains(text_search)
    df_search = df[m1 | m2 | m3 | m4]

    # Another way to show the filtered results
    # Show the cards
    N_cards_per_row = 5
    if text_search:
        for n_row, row in df_search.reset_index().iterrows():
            i = n_row%N_cards_per_row
            if i==0:
                st.write("---")
                cols = st.columns(N_cards_per_row, gap="large")
            # draw the card
            with cols[n_row%N_cards_per_row]:
                st.caption(f"{row['brandref'].strip()} - {row['coloref'].strip()} ")
                st.markdown(f"**{row['titleref'].strip()}**")
                st.text(row['formatted_price'])
                st.image(f"{row['medium_image_url']}")
            

    title_current = st.selectbox('T√¨m s·∫£n ph·∫©m:',
                        list(filterdf['titleref']))

    product = test_data_[(test_data_['titleref'] == title_current)]

    s1 = product.index[0]
    captions = [test_data_['brand'].values[s1],test_data_['formatted_price'].values[s1]]
    c1,c2,c3 = st.columns(3)
    with c1:
        st.image(test_data_['medium_image_url'].values[s1])
    with c2:
        st.text('Nh√£n hi·ªáu: ')
        st.text('M√†u s·∫Øc: ')
        st.text('Gi√° ti·ªÅn: ')
    with c3:
        st.text(test_data_['brandref'].values[s1])
        st.text(test_data_['coloref'].values[s1])
        st.text(test_data_['formatted_price'].values[s1])

    distances, indices = knn.kneighbors([X_test.toarray()[s1]])
    result1 = list(indices.flatten())[:5]
    result2 = list(indices.flatten())[5:]

    if st.button('G·ª£i √Ω s·∫£n ph·∫©m cho b·∫°n'):
        st.success('Danh s√°ch s·∫£n ph·∫©m:')
        col1,col2,col3,col4,col5 = st.columns(5)
        lst1 = [col1,col2,col3,col4,col5]
        for i,j in zip(lst1,result1):
            with i:
                st.text(train_data_['titleref'].values[j])
                st.text(train_data_['brandref'].values[j])
                st.text(train_data_['coloref'].values[j])
                st.text(train_data_['formatted_price'].values[s1])
                st.image(train_data_['medium_image_url'].values[j])

        col6, col7, col8, col9, col10 = st.columns(5)
        lst2 = [col6, col7, col8, col9, col10]
        for k,l in zip(lst2,result2):
            with k:
                st.text(train_data_['titleref'].values[j])
                st.text(train_data_['brandref'].values[l])
                st.text(train_data_['coloref'].values[l])
                st.text(train_data_['formatted_price'].values[s1])
                st.image(train_data_['medium_image_url'].values[l])

        st.success('C·∫£m ∆°n ƒë√£ mua h√†ng')

# #--- THANH TO√ÅN ---
# if selected == "Thanh To√°n":
#     st.sidebar.markdown(
#     f'<a href="#thanh-toan" style="text-decoration: none; color: inherit;"><h4>üí≥ Thanh To√°n</h4></a>', 
#     unsafe_allow_html=True
# )
# st.write("<a name='thanh-toan'></a>", unsafe_allow_html=True)
 
# # st.subheader("üí≥ Thanh To√°n")

# if not cart:
#         st.write("Gi·ªè h√†ng tr·ªëng.")
# else:
#         total_price = 0
#         for product, info_list in cart.items():
#             for info in info_list:
#                 st.write(f"{product} x {info['quantity']} - ${info['price'] * info['quantity']}")
#                 total_price += info['price'] * info['quantity']

#         st.write(f"**T·ªïng gi√°:** ${total_price}")

#         # T·∫°o li√™n k·∫øt ƒë·∫øn trang thanh to√°n ho·∫∑c s·ª≠ d·ª•ng c·ªïng thanh to√°n b√™n ngo√†i 
#         checkout_url = "https://buy.stripe.com/test_fZe2963rr1u22J2001"  
#         st.markdown(
#             f'<a href={STRIPE_CHECKOUT} class="button">üëâ Thanh To√°n Ngay</a>',
#             unsafe_allow_html=True,
#         )

# #--- FAQ ---
# if selected == "FAQ":
#     st.sidebar.markdown(
#         f'<a href="#faq" style="text-decoration: none; color: inherit;"><h4>:raising_hand: FAQ</h4></a>', 
#         unsafe_allow_html=True
#     )
#     st.write("<a name='faq'></a>", unsafe_allow_html=True)
#     st.write("---")
#     st.subheader(":raising_hand: FAQ")
#     faq = {
#         "Question 1": "Some text goes here to answer question 1",
#         "Question 2": "Some text goes here to answer question 2",
#         "Question 3": "Some text goes here to answer question 3",
#         "Question 4": "Some text goes here to answer question 4",
#         "Question 5": "Some text goes here to answer question 5",
#     }
#     for question, answer in faq.items():
#         with st.expander(question):
#             st.write(answer)


    # --- CONTACT FORM ---
if selected == "ƒê√°nh Gi√°":
    # --- FAQ ---
    st.sidebar.markdown(
        f'<a href="#faq" style="text-decoration: none; color: inherit;"><h4>:raising_hand: FAQ</h4></a>', 
        unsafe_allow_html=True
    )
    st.write("<a name='faq'></a>", unsafe_allow_html=True)
    st.subheader(":raising_hand: FAQ")
    faq = {
        "Question 1": "Some text goes here to answer question 1",
        "Question 2": "Some text goes here to answer question 2",
        "Question 3": "Some text goes here to answer question 3",
        "Question 4": "Some text goes here to answer question 4",
        "Question 5": "Some text goes here to answer question 5",
    }
    for question, answer in faq.items():
        with st.expander(question):
            st.write(answer)
    #--- ƒê√°nh Gi√° ---
    st.sidebar.markdown(
        f'<a href="#lien-he" style="text-decoration: none; color: inherit;"><h4>:mailbox: ƒê√°nh Gi√°</h4></a>', 
        unsafe_allow_html=True
    )
    st.write("<a name='lien-he'></a>", unsafe_allow_html=True)
    st.write("---")
    st.subheader(":mailbox: H√£y Cho Ch√∫ng T√¥i Bi·∫øt √ù Ki·∫øn C·ªßa B·∫°n!")
    contact_form = f"""
    <form action="https://formsubmit.co/{CONTACT_EMAIL}" method="POST">
        <input type="hidden" name="_captcha" value="false">
        <input type="text" name="name" placeholder="H·ªç T√™n" required>
        <input type="email" name="email" placeholder="Email" required>
        <textarea name="message" placeholder="H√£y ƒë·ªÉ l·∫°i l·ªùi nh·∫Øn cho ch√∫ng t√¥i"></textarea>
        <button type="submit" class="button">G·ª≠i ‚úâ</button>
    </form>
    """
    st.markdown(contact_form, unsafe_allow_html=True)





